<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/public/css/style_test_2.css">
    <title>Hard moving test</title>
</head>
<body>
<div id="bg" class="bg_img">
    <div class="top">
        <a href="/test_2">
            <img class="icon_back" src="public/img/back.png">
        </a>
        <a href="/login">
            <img class="icon_menu" src="public/img/menu.png">
        </a>
    </div>
<!--    эдвард розинский-->
    <div class="tester">
        <div id='Instruction' class="instruction text_instruction">
            Этот тест считывает скорость реакции на движущийся объект. Ваша цель - нажать на
            <b style="color: green">Numpad1</b>, <b style="color: red">Numpad2</b> или <b style="color: purple">Numpad3</b>
            как только медленный, средний или быстрый круг соответственно совместиться с белым.
        </div>
        <div id='Iteration' class="iteration"></div>
        <button id='Start_button' class="start_button" name="start" onclick="start_test()">Начать</button>
        <div class="moving-test" id="movingTest">
            <div class="moving-test__moving-dot-wrapper moving-test__moving-dot-wrapper_speed_low" id='slowMovingDot'>
                <div class="moving-test__moving-dot" style="background-color: green"></div>
            </div>
            <div class="moving-test__moving-dot-wrapper" id='middleMovingDot'>
                <div class="moving-test__moving-dot"></div>
            </div>
            <div class="moving-test__moving-dot-wrapper moving-test__moving-dot-wrapper_speed_high" id='fastMovingDot'>
                <div class="moving-test__moving-dot" style="background-color: purple"></div>
            </div>
            <div class="moving-test__fixed-dot" id="fixedDot"></div>
        </div>
        <div id='Result' class="result"></div>
        <a href="/hard_moving_test" class="restart_button" id='Retry'>Заново</a>
    </div>
</div>
<script>
    let iteration = 0;
    const NUMBER_OF_ITERATIONS = 30;

    let interval;
    //Результаты
    const resultList = {slow: [],
                        middle: [],
                        fast: []};

    function start_test() {
        interval = setInterval(() => {
            iteration ++;
            document.getElementById('Iteration').innerHTML = 'Попытка: ' + iteration +'/' + NUMBER_OF_ITERATIONS;
            if (iteration >= NUMBER_OF_ITERATIONS) finish_test();
        }, 5000);
        document.getElementById('Instruction').style.display = 'none';
        document.getElementById('Start_button').style.display = 'none';
        document.getElementById('bg').style.background = 'black';
        document.getElementById('Iteration').style.display = 'block';
        document.getElementById('Result').style.display = 'block';
        document.getElementById('Iteration').innerHTML = 'Попытка: ' + iteration +'/' + NUMBER_OF_ITERATIONS;
        document.getElementById('movingTest').style.display = 'block';

        document.addEventListener('keydown', next_time);
    }

    function next_time(e) {
        switch (e.code) {
            case 'Numpad1':
                calculate_wrong('slow');
                break;
            case 'Numpad2':
                calculate_wrong('middle');
                break;
            case 'Numpad3':
                calculate_wrong('fast');
                break;
        }
    }
    
    function calculate_wrong(speed) {

        document.getElementById('Iteration').innerHTML = 'Попытка: ' + iteration +'/' + NUMBER_OF_ITERATIONS;

        let targetMovingDot = document.getElementById(speed + 'MovingDot');

        targetMovingDot.children[0].classList.remove('dot_highlight');

        let rotationalSpeed = 2 * Math.PI / window.getComputedStyle(targetMovingDot).animationDuration.slice(0, -1);

        let rotationalMatrix = window.getComputedStyle(targetMovingDot).transform
            .split('(')[1].split(')')[0].split(',');
        let angleTemp = Math.asin(rotationalMatrix[1]);
        let angle = Math.acos(rotationalMatrix[0]);
        angle = angleTemp > 0 ? -angle : angle;

        let wrong = angle / rotationalSpeed;
        if (wrong < 0.35 && wrong > -0.35){
            document.getElementById('Result').style.color = '#fff';
            document.getElementById('Result').innerHTML = 'Ваш результат: ' + (wrong).toFixed(3) +' с';
            resultList[speed].push(wrong);
            targetMovingDot.children[0].classList.add('dot_highlight');
        } else {
            if (speed === "fast") {
                document.getElementById('Result').style.color = 'purple';
                document.getElementById('Result').innerHTML = 'Ошибка!';

            }
            if (speed === "middle") {
                document.getElementById('Result').style.color = 'red';
                document.getElementById('Result').innerHTML = 'Ошибка!';

            }
            if (speed === "slow") {
                document.getElementById('Result').style.color = 'green';
                document.getElementById('Result').innerHTML = 'Ошибка!';

            }
        }


    }
    
    function finish_test() {
        document.removeEventListener('keydown', next_time);
        document.getElementById('Result').style.color = '#fff';

        let sd = {slow: 0,
                  middle: 0,
                  fast: 0};
        let sdMinus = {slow: 0,
                       middle: 0,
                       fast: 0};
        let sdPlus = {slow: 0,
                      middle: 0,
                      fast: 0};
        let dispersionMinusCounter = 0;
        let dispersionPlusCounter = 0;

        let average = [];

        for (let result in resultList) {
            let dispersion = resultList[result].reduce((acc, number) => acc + Math.pow(number, 2), 0) / (resultList[result].length);
            let dispersionMinus = 0;
            let dispersionPlus = 0;
            resultList[result].forEach(elem => {
                if (elem < 0) {
                    dispersionMinus += Math.pow(elem, 2);
                    dispersionMinusCounter += 1;
                } else if (elem > 0) {
                    dispersionPlus += Math.pow(elem, 2);
                    dispersionPlusCounter += 1;
                }
            });
            sd[result] = Math.sqrt(dispersion).toFixed(3);
            sdMinus[result] = Math.sqrt(dispersionMinus / (dispersionMinusCounter)).toFixed(3);
            sdPlus[result] = Math.sqrt(dispersionPlus / (dispersionPlusCounter)).toFixed(3);
            if (sd[result] == "NaN") {
                sd[result] = 'Не выявлено';
            }
            if (sdMinus[result] == 'NaN') {
                sdMinus[result] = 'Не выявлено';
            }
            if (sdPlus[result] == 'NaN') {
                sdPlus[result] = 'Не выявлено';
            }
        }

        for (let elem in sd) {
            if (sd[elem] !== 'Не выявлено') {
                average.push(parseFloat(sd[elem]));
            }
        }

        document.getElementById('movingTest').style.display = 'none';
        document.getElementById('Iteration').style.display = 'none';

        document.getElementById('Result').innerHTML = `Стандартное отклонение:<br>
                <table style="display: inline-table;">
                    <tr>
                        <td style="border-bottom: 2px solid #fff;"></td>
                        <td>общее</td>
                        <td>минус</td>
                        <td style="border-right: none">плюс</td>
                    </tr>
                    <tr>
                        <td>медленный круг</td>
                        <td>${sd['slow']}</td>
                        <td>${sdMinus['slow']}</td>
                        <td style="border-right: none">${sdPlus['slow']}</td>
                    </tr>
                    <tr>
                        <td>средний круг</td>
                        <td>${sd['middle']}</td>
                        <td>${sdMinus['middle']}</td>
                        <td style="border-right: none">${sdPlus['middle']}</td>
                    </tr>
                    <tr>
                        <td style="border-bottom: none">быстрый круг</td>
                        <td style="border-bottom: none">${sd['fast']}</td>
                        <td style="border-bottom: none">${sdMinus['fast']}</td>
                        <td style="border: none">${sdPlus['fast']}</td>
                    </tr>
                </table><br>
                среднее по всем стандартным отклонениям: ${(average.reduce((acc, num) => acc + num, 0) / average.length).toFixed(3)} c.
                <style>
                    td {
                        border-bottom: 2px solid #fff;
                        border-right: 2px solid #fff;
                        padding: 5px;
                    }
                    table {
                        margin: 20px;
                    }
                </style>`;

        document.getElementById('Result').style.top = '30vh';

        document.getElementById('Retry').style.display = 'block';
        clearInterval(interval);
    }
</script>
</body>
</html>